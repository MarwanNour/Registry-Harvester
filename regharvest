#!/usr/bin/env bash
# This script was generated by bashly 0.8.2 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n"
  exit 1
fi

# :command.master_script
# :command.root_command
root_command() {
  # src/root_command.sh
  # echo "# this file is located in 'src/root_command.sh'"
  # echo "# you can edit it freely and regenerate (it will not be overwritten)"

  # Banner
  echo "    ____             _      __                    "
  echo "   / __ \___  ____ _(_)____/ /________  __        "
  echo "  / /_/ / _ \/ __  / / ___/ __/ ___/ / / /        "
  echo " / _, _/  __/ /_/ / (__  ) /_/ /  / /_/ /         "
  echo "/_/ |_|\___/\__, /_/____/\__/_/   \__, /          "
  echo "    __  __ /____/                /_____           "
  echo "   / / / /___ _______   _____  _____/ /____  _____"
  echo "  / /_/ / __  / ___/ | / / _ \/ ___/ __/ _ \/ ___/"
  echo " / __  / /_/ / /   | |/ /  __(__  ) /_/  __/ /    "
  echo "/_/ /_/\__,_/_/    |___/\___/____/\__/\___/_/     "
  echo ""

  # Check jq requirement
  req_test=$(jq --version)

  if [[ $? -eq 127 ]]; then
    echo "Please install jq to use this tool"
    exit 1
  fi

  # Debug mode
  debug=0
  if [[ (! -z "${args[--debug]}") ||  (! -z "${args[-d]}") ]]; then
    set -x

    debug=1
  fi

  echo ""

  response=$(curl --silent  ${args[source]})

  if [[ $? -ne 0 ]]; then
    echo "Error sending request to registry"
    printf "\n$response\n"
    exit 1
  fi

  if [[ $debug -eq 1 ]]; then
    printf "\n$response\n"
  fi
}

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
regharvest_usage() {
  if [[ -n $long_usage ]]; then
    printf "regharvest - Harvest Blobs from Docker Registry V2\n"
    echo

  else
    printf "regharvest - Harvest Blobs from Docker Registry V2\n"
    echo

  fi

  printf "Usage:\n"
  printf "  regharvest SOURCE OUTPUT [options]\n"
  printf "  regharvest --help | -h\n"
  printf "  regharvest --version | -v\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo
    # :command.usage_flags
    # :flag.usage
    echo "  --user, -u USER"
    printf "    Username to use for logging in\n"
    echo

    # :flag.usage
    echo "  --pass, -p PASSWORD"
    printf "    Password to use for logging in\n"
    echo

    # :flag.usage
    echo "  --insecure, -k"
    printf "    Allow insecure server connections when using SSL\n"
    echo

    # :flag.usage
    echo "  --debug, -d"
    printf "    Print Debug output\n"
    echo
    # :command.usage_args
    printf "Arguments:\n"

    # :argument.usage
    echo "  SOURCE"
    printf "    URL (or IP) to download from\n"
    echo

    # :argument.usage
    echo "  OUTPUT"
    printf "    Output folder\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"

    printf "  regharvest example.com output-folder\n"
    printf "  regharvest example.com output-folder --user username --pass password\n"
    printf "  regharvest example.com output-folder --insecure\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for (( i=0 ; i < ${#flags} ; i++ )); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if (( ${#args[@]} )); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if (( ${#other_args[@]} )); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

# :command.command_functions

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --version | -v )
    version_command
    exit
    ;;

  --help | -h )
    long_usage=yes
    regharvest_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="root"
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --user | -u )
      # :flag.conflicts
      # :flag.case_arg
      if [[ -n ${2+x} ]]; then
        # :flag.validations
        args[--user]="$2"
        shift
        shift
      else
        printf "%s\n" "--user requires an argument: --user, -u USER"
        exit 1
      fi
      ;;

    # :flag.case
    --pass | -p )
      # :flag.conflicts
      # :flag.case_arg
      if [[ -n ${2+x} ]]; then
        # :flag.validations
        args[--pass]="$2"
        shift
        shift
      else
        printf "%s\n" "--pass requires an argument: --pass, -p PASSWORD"
        exit 1
      fi
      ;;

    # :flag.case
    --insecure | -k )
      # :flag.conflicts
      # :flag.case_no_arg
      args[--insecure]=1
      shift
      ;;

    # :flag.case
    --debug | -d )
      # :flag.conflicts
      # :flag.case_no_arg
      args[--debug]=1
      shift
      ;;

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      if [[ -z ${args[source]+x} ]]; then
        # :argument.validations
        args[source]=$1
        shift
      elif [[ -z ${args[output]+x} ]]; then
        # :argument.validations
        args[output]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;

    esac
  done
  # :command.required_args_filter
  if [[ -z ${args[source]+x} ]]; then
    printf "missing required argument: SOURCE\nusage: regharvest SOURCE OUTPUT [options]\n"
    exit 1
  fi
  if [[ -z ${args[output]+x} ]]; then
    printf "missing required argument: OUTPUT\nusage: regharvest SOURCE OUTPUT [options]\n"
    exit 1
  fi
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
  # :command.user_filter
}

# :command.initialize
initialize() {
  version="RegistryHarvester v0.1"
  long_usage=''
  set -e

  # src/initialize.sh
}

# :command.run
run() {
  declare -A args=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  if [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
